---
- name: Installation of Crowdstrike Agent 
  hosts: win_servers
  gather_facts: false

  tasks:
    - name: Ping Check
      win_ping:
      register: pingStatus
      changed_when: pingStatus.ping == 'pong'
      ignore_unreachable: true

    - name: set message for unreachable servers
      set_facts:
        unreachableStatus: "{{ inventory_hostname }} is unreachable"
      ignore_errors: true
      when: pingStatus.changed == false and 'unreachable' in pingStatus.skip_reason

    - name: disable windows Defender
      win_shell: Set-MpPreference-DisableRealtimeMonitoring $true
      register: defender_result

    - name: Including Services variable
      include_vars:
        file: services_variables.yml

    - name: Check Required Services are Running
      win_service:
        name: "{{ item }}"
        state: started
      loop: "{{ services_to_check }}"
      register: service_result

    - name: Include CrowdStrike variables
      include_vars:
        file: crowdstrike_variables.yml
     
    - name: Copy Crowdstrike Agent to Target Server
      win_copy: 
        src: roles/ansible-role-crowdstrike-installation/files/WindowsSensor.LionLanner.exe
        dest: C:/Atos/Tools/

    - name: Run Crowdstrike Agent Installation
      win_shell: |
        Start-Process -FilePath ""C:\Atos\Tools\WindowsSensor.LionLanner.exe"" -ArgumentList ""/install /quiet /norestart APP_PROXYNAME=internet.services.royalmailgroup.net APP_PROXYPORT=8080 ProvNoWait=1 PROXYDISABLE=1 CID=960DBDCEAB1F43618092B6DB574A95C5-C6"" -Wait"

    - name: Confirm Agent Installation
      win_shell: sc.exe query csagent
      register: agent_installation_result

    - name: Debug Agent Installation Result
      debug:
        var: agent_installation_result

    - name: Check sensor is connected to cloud or not
      win_shell: |
        $netstatOutput = netstat -f
        if ($netstatOutput -match ""rmgp\.royalmailgroup\.net:8080.*ESTABLISHED"") {
            Write-Host ""Connected To Cloud Console ""
        }
        else{
            Write-Host ""Not connected To Cloud Console""
        }

    - name: Creating directory to copy script
      win_file:
        path: "{{ to_copy_script }}"
        state: directory
        mode: '0777'
      register: directoryStatus
      when: ping_output.changed == true
  
    - name: Creating an empty CSV file 
      win_file:
        path: "{{ to_copy_script }}Crowd_Strike_agent_Report_{{ansible_hostname}}.csv"
        state: touch
        mode: '0777'
      register: csvStatus
      when: ping_output.changed == true
  
    - name: Copy template to location
      win_template:
        src: ../template/crowd_strike_report_template.csv.j2
        dest: '{{ to_copy_script }}Crowd_Strike_agent_Report_{{ansible_hostname}}.csv'
        mode: 0777
      register: templateStatus
      ignore_errors: yes
      when: ping_output.changed == true
  
    - name: Creates directory on execution node to store QA files
      file:
        path: "{{output_execution_node}}"
        state: directory
        recurse: yes 
        mode: '0777'
      delegate_to: localhost
      run_once: true

    - name: fetch all files from target server to exe node
      fetch:
        src: '{{ to_copy_script }}Crowd_Strike_agent_Report_{{ansible_hostname}}.csv'
        dest: '{{output_execution_node}}Crowd_Strike_agent_Report_{{ansible_hostname}}.csv'
        flat: yes
      register: fetched_file_output
      when: ping_output.changed == true
  
    - name: Delete copied files from each server
      win_file:
        path: "{{ to_copy_script }}"
        state: absent
      when: fetched_file_output is success and ping_output.changed == true

    - name: Delete duplicate entries and headers
      shell: awk 'FNR==1 && NR!=1{next;}{print}' "{{output_execution_node}}"Crowd_Strike_agent_Report*.csv > "{{output_execution_node}}"Final_Crowd_Strike_agent_Report.csv
      delegate_to: localhost
      register: final_output
      run_once: true

    - name: Giving permissions to file
      command: chmod 777 "{{output_execution_node}}"Final_Crowd_Strike_agent_Report.csv
      delegate_to: localhost
      run_once: true

    - name: Delete csv files from execution node
      file:
          path: "{{output_execution_node}}Crowd_Strike_agent_Report_{{ansible_hostname}}.csv"
          state: absent
      delegate_to: localhost
      when: ping_output.changed == true

    - name: Inserting reason for unreachable servers
      lineinfile:
        path: "{{ output_execution_node }}Final_Crowd_Strike_agent_Report.csv"
        line: "N/A,N/A,N/A,N/A,N/A,N/A,{{ inventory_hostname }},N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,N/A,{{serverStatus}}"
        insertafter: EOF
      delegate_to: localhost
      when: ping_output.changed == false


